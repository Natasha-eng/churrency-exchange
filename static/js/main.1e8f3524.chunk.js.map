{"version":3,"sources":["redux/actions.ts","redux/selectors.ts","components/CurrencyExchange.tsx","components/CurrencyExchangeContainer.tsx","App.tsx","redux/currencyReducer.ts","redux/state.ts","reportWebVitals.ts","index.tsx"],"names":["ACTIONS_TYPE","selectAll","state","currency","ChangeCurrencyFieldAC","amountOfBYN","amountOfCurrency","type","CHANGE_CURRENCY_FIELD_TYPE","payload","ChangeActionAC","isBuying","CHANGE_CHANGE_ACTION","CurrencyExchange","currenciesName","currentCurrency","currencyRate","changeCurrencyField","changeAction","changeCurrentCurrency","viewCurrency","Fragment","value","data-currency","onChange","className","map","index","onClick","data-action","CurrencyEContainer","dispatch","useDispatch","useSelector","currencies","currencyName","buyRate","sellRate","e","currentTarget","isFinite","dataset","trigger","Number","toFixed","action","CHANGE_CURRENT_CURRENCY","changeCurrentCurrencyAC","App","CurrencyExchangeContainer","initialState","reducers","combineReducers","store","createStore","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1e8f3524.chunk.js","sourcesContent":["import { useDispatch as _useDispatch } from 'react-redux';\r\n\r\nexport enum ACTIONS_TYPE {\r\n    CHANGE_CURRENCY_FIELD_TYPE = 'CurrencyExchange/CHANGE_CURRENCY_FIELD_TYPE',\r\n    CHANGE_CHANGE_ACTION = 'CurrencyExchange/CHANGE_CHANGE_ACTION',\r\n    CHANGE_CURRENT_CURRENCY = 'CurrencyExchange/CHANGE_CURRENT_CURRENCY',\r\n}\r\n\r\nexport type ChangeCurrencyFieldType = {\r\n    type: ACTIONS_TYPE.CHANGE_CURRENCY_FIELD_TYPE\r\n    payload: {\r\n        amountOfBYN: string,\r\n        amountOfCurrency: string\r\n    }\r\n};\r\n\r\nexport const ChangeCurrencyFieldAC = (amountOfBYN: string, amountOfCurrency: string): ChangeCurrencyFieldType => {\r\n    return {\r\n        type: ACTIONS_TYPE.CHANGE_CURRENCY_FIELD_TYPE,\r\n        payload: { amountOfBYN, amountOfCurrency },\r\n    };\r\n};\r\n\r\nexport type ChangeAction = {\r\n    type: ACTIONS_TYPE.CHANGE_CHANGE_ACTION,\r\n    payload: { isBuying: boolean }\r\n\r\n};\r\n\r\nexport const ChangeActionAC = (isBuying: boolean): ChangeAction => {\r\n    return {\r\n        type: ACTIONS_TYPE.CHANGE_CHANGE_ACTION,\r\n        payload: { isBuying },\r\n    };\r\n};\r\n\r\nexport type ChangeCurrentCurrencyType = {\r\n    type: ACTIONS_TYPE.CHANGE_CURRENT_CURRENCY,\r\n    payload: { currentCurrency: string }\r\n};\r\n\r\nexport const changeCurrentCurrencyAC = (currentCurrency: string): ChangeCurrentCurrencyType => {\r\n    return {\r\n        type: ACTIONS_TYPE.CHANGE_CURRENT_CURRENCY,\r\n        payload: { currentCurrency },\r\n    };\r\n};\r\n\r\nexport type CurrencyReducersTypes = ChangeCurrencyFieldType | ChangeAction | ChangeCurrentCurrencyType;\r\n\r\nexport function useDispatch() {\r\n    const dispatch = _useDispatch();\r\n    return (ac: CurrencyReducersTypes) => {\r\n        dispatch(ac);\r\n    };\r\n}","import {IGlobalState} from './state';\r\ninterface IRootState extends IGlobalState{}\r\n\r\nexport const selectCurrencies = (state: IRootState) => state.currency.currencies;\r\nexport const selectCurrentCurrency = (state: IRootState) => state.currency.currentCurrency;\r\nexport const selectIsBuying = (state: IRootState) => state.currency.isBuying;\r\nexport const selectAmountOfBYN = (state: IRootState) => state.currency.amountOfBYN;\r\nexport const selectAmountOfCurrency = (state: IRootState) => state.currency.amountOfCurrency;\r\n\r\nexport const selectAll = (state:IRootState) => state.currency;","import React from 'react';\r\n\r\ntype CurrencyExchangePropsType = {\r\n    currenciesName: string[];\r\n    currentCurrency: string;\r\n    currencyRate: number;\r\n    isBuying: boolean;\r\n    amountOfBYN: string;\r\n    amountOfCurrency: string;\r\n    changeCurrencyField: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    changeAction: (e: React.MouseEvent<HTMLSpanElement>) => void;\r\n    changeCurrentCurrency: (e: React.MouseEvent<HTMLLIElement>) => void;\r\n};\r\n\r\nconst CurrencyExchange: React.FunctionComponent<CurrencyExchangePropsType> = ({\r\ncurrenciesName,\r\ncurrentCurrency,\r\ncurrencyRate,\r\nisBuying,\r\namountOfBYN,\r\namountOfCurrency,\r\nchangeCurrencyField,\r\nchangeAction,\r\nchangeCurrentCurrency,\r\n}) => {\r\n    const viewCurrency = isBuying ? (\r\n        <React.Fragment>\r\n            <label>\r\n                You give the next amount of BYN:\r\n                <input value={amountOfBYN} data-currency=\"byn\" onChange={changeCurrencyField} />\r\n            </label>\r\n            <label>\r\n                You get the next amount of {currentCurrency}:\r\n                <input value={amountOfCurrency} data-currency=\"currency\" onChange={changeCurrencyField} />\r\n            </label>\r\n        </React.Fragment>\r\n    ) : (\r\n        <React.Fragment>\r\n            <label>\r\n                You give the next amount of {currentCurrency}:\r\n                <input value={amountOfCurrency} data-currency=\"currency\" onChange={changeCurrencyField} />\r\n            </label>\r\n            <label>\r\n                You get the next amount of BYN:\r\n                <input value={amountOfBYN} data-currency=\"byn\" onChange={changeCurrencyField} />\r\n            </label>\r\n        </React.Fragment>\r\n    );\r\n\r\n    return (\r\n        <div className=\"currency\">\r\n            <h2>Currency exchange</h2>\r\n            <div className=\"currency-names\">\r\n                <p>Current currency:</p>\r\n                <ul>\r\n                    {currenciesName.map((currency: string, index: number) => {\r\n                        return (\r\n                            <li\r\n                                key={`${index}-${currency}`}\r\n                                className={`currencies ${currentCurrency === currency ? 'activeCurrency' : null}`}\r\n                                onClick={changeCurrentCurrency}\r\n                                data-currency={currency}\r\n                            >\r\n                                {currency}\r\n                            </li>\r\n                        );\r\n                    })}\r\n                </ul>\r\n            </div>\r\n            <div className=\"currency-action\">\r\n        <span className={isBuying ? 'active' : ''} data-action=\"buy\" onClick={changeAction}>\r\n          Buy\r\n        </span>\r\n                <span className={isBuying ? '' : 'active'} data-action=\"sell\" onClick={changeAction}>\r\n          Sell\r\n        </span>\r\n            </div>\r\n            <div className=\"fields\">\r\n                <p>Currency rate: {currencyRate}</p>\r\n                {viewCurrency}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CurrencyExchange;\r\n","import React from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {CurrencyState} from \"../redux/currencyReducer\";\r\nimport {selectAll} from \"../redux/selectors\";\r\nimport {ChangeActionAC, ChangeCurrencyFieldAC, changeCurrentCurrencyAC} from \"../redux/actions\";\r\nimport CurrencyExchange from \"./CurrencyExchange\";\r\n\r\n/*interface ICurrencyProps extends CurrencyState {\r\n  setCurrencyAmount: (amountOfBYN: string, amountOfCurrency: string) => void;\r\n  setAction: (isBuying: boolean) => void;\r\n  changeCurrency: (currency: string) => void;\r\n}*/\r\n\r\n/*\r\ninterface ICurrencyProps extends CurrencyState {\r\n  ChangeCurrencyFieldAC: Function;\r\n  ChangeActionAC: Function;\r\n  changeCurrentCurrencyAC: Function;\r\n}\r\n*/\r\n\r\n//useDispatch\r\ninterface ICurrencyProps extends CurrencyState {\r\n}\r\n\r\n/*const CurrencyEContainer: React.FunctionComponent<ICurrencyProps> = ({\r\n  currencies,\r\n  currentCurrency,\r\n  isBuying,\r\n  amountOfBYN,\r\n  amountOfCurrency,\r\n /!* setCurrencyAmount,\r\n  setAction,\r\n  changeCurrency,*!/\r\n ChangeActionAC,\r\n changeCurrentCurrencyAC\r\n})*/\r\n\r\n/*const CurrencyEContainer: React.FunctionComponent<ICurrencyProps> = ({\r\ncurrencies,\r\ncurrentCurrency,\r\nisBuying,\r\namountOfBYN,\r\namountOfCurrency})*/\r\n\r\nconst CurrencyEContainer: React.FunctionComponent = () => {\r\n\r\n    let dispatch = useDispatch();\r\n\r\n    /*const currencies = useSelector(selectCurrencies);\r\n    const currentCurrency = useSelector(selectCurrentCurrency);\r\n    const isBuying = useSelector(selectIsBuying);\r\n    const amountOfBYN = useSelector(selectAmountOfBYN);\r\n    const amountOfCurrency = useSelector(selectAmountOfCurrency);*/\r\n\r\n    const {currencies, currentCurrency, isBuying, amountOfBYN, amountOfCurrency} = useSelector(selectAll);\r\n\r\n    let currencyRate: number = 0;\r\n    const currenciesName = currencies.map((currency) => {\r\n        if (currency.currencyName === currentCurrency) {\r\n            currencyRate = isBuying ? currency.buyRate : currency.sellRate;\r\n        }\r\n        return currency.currencyName;\r\n    });\r\n\r\n    const changeCurrencyField = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        let value = e.currentTarget.value;\r\n        if (!isFinite(+value)) return;\r\n        if (e.currentTarget.dataset.currency) {\r\n            const trigger: string = e.currentTarget.dataset.currency;\r\n            if (trigger === 'byn') {\r\n                if (value === '') {\r\n                    //setCurrencyAmount(value, value);\r\n                    //ChangeCurrencyFieldAC(value, value);\r\n                    dispatch(ChangeCurrencyFieldAC(value, value));\r\n                    /*dispatch({\r\n                      type: ACTIONS_TYPE.CHANGE_CURRENCY_FIELD_TYPE,\r\n                      payload: { amountOfBYN:value , amountOfCurrency:value },\r\n                    });*/\r\n                } else {\r\n                    //setCurrencyAmount(value, (+Number(value).toFixed(2) / currencyRate).toFixed(2));\r\n                    //ChangeCurrencyFieldAC(value, (+Number(value).toFixed(2) / currencyRate).toFixed(2));\r\n                    dispatch(ChangeCurrencyFieldAC(value, (+Number(value).toFixed(2) / currencyRate).toFixed(2)));\r\n                }\r\n            } else {\r\n                if (value === '') {\r\n                    //setCurrencyAmount(value, value);\r\n                    //ChangeCurrencyFieldAC(value, value);\r\n                    dispatch(ChangeCurrencyFieldAC(value, value));\r\n                } else {\r\n                    //setCurrencyAmount((+Number(value).toFixed(2) * currencyRate).toFixed(2), value);\r\n                    //ChangeCurrencyFieldAC((+Number(value).toFixed(2) * currencyRate).toFixed(2), value);\r\n                    dispatch(ChangeCurrencyFieldAC((+Number(value).toFixed(2) * currencyRate).toFixed(2), value));\r\n                }\r\n            }\r\n        }\r\n    };\r\n    const changeAction = (e: React.MouseEvent<HTMLSpanElement>) => {\r\n        // e.currentTarget.dataset.action === 'buy' ? setAction(true) : setAction(false);\r\n        //e.currentTarget.dataset.action === 'buy' ? ChangeActionAC(true) : ChangeActionAC(false);\r\n        e.currentTarget.dataset.action === 'buy' ? dispatch(ChangeActionAC(true)) : dispatch(ChangeActionAC(false));\r\n    };\r\n\r\n    const changeCurrentCurrency = (e: React.MouseEvent<HTMLLIElement>) => {\r\n        //e.currentTarget.dataset.currency && changeCurrency(e.currentTarget.dataset.currency);\r\n        //e.currentTarget.dataset.currency && changeCurrentCurrencyAC(e.currentTarget.dataset.currency);\r\n        e.currentTarget.dataset.currency && dispatch(changeCurrentCurrencyAC(e.currentTarget.dataset.currency));\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <CurrencyExchange\r\n                currenciesName={currenciesName}\r\n                currentCurrency={currentCurrency}\r\n                currencyRate={currencyRate}\r\n                isBuying={isBuying}\r\n                amountOfBYN={amountOfBYN}\r\n                amountOfCurrency={amountOfCurrency}\r\n                changeCurrencyField={changeCurrencyField}\r\n                changeAction={changeAction}\r\n                changeCurrentCurrency={changeCurrentCurrency}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\n/*const mapStateToProps = (state: IGlobalState) => {\r\n  return {\r\n    currencies: state.currency.currencies,\r\n    currentCurrency: state.currency.currentCurrency,\r\n    isBuying: state.currency.isBuying,\r\n    amountOfBYN: state.currency.amountOfBYN,\r\n    amountOfCurrency: state.currency.amountOfCurrency,\r\n  };\r\n};*/\r\n// @ts-ignore\r\n/*const mapDispatchToProps = (dispatch: Dispatch<CurrencyReducersTypes>) => {\r\n  return {\r\n    setCurrencyAmount(amountOfBYN: string, amountOfCurrency: string) {\r\n      dispatch(ChangeCurrencyFieldAC(amountOfBYN, amountOfCurrency));\r\n    },\r\n    setAction(isBuying: boolean) {\r\n      dispatch(ChangeActionAC(isBuying));\r\n    },\r\n    changeCurrency(currency: string) {\r\n      dispatch(changeCurrentCurrencyAC(currency));\r\n    },\r\n  };\r\n};*/\r\n// @ts-ignore\r\n//export const CurrencyExchangeContainer = compose(connect(mapStateToProps, mapDispatchToProps))(CurrencyEContainer);\r\n//shorthand MapDispatchToProps\r\n/*export const CurrencyExchangeContainer = compose(connect(mapStateToProps,\r\n  {ChangeCurrencyFieldAC, ChangeActionAC, changeCurrentCurrencyAC}))(CurrencyEContainer);*/\r\n//useDispatch\r\n/*\r\nexport const CurrencyExchangeContainer = compose(connect(mapStateToProps,\r\n  {}))(CurrencyEContainer);\r\n*/\r\n\r\nexport default CurrencyEContainer;\r\n","import React from 'react';\nimport './App.css';\nimport CurrencyExchangeContainer from \"./components/CurrencyExchangeContainer\";\n\nfunction App() {\n  return (\n      <React.Fragment>\n        <CurrencyExchangeContainer />\n      </React.Fragment>\n  );\n}\n\nexport default App;\n","import { ACTIONS_TYPE, CurrencyReducersTypes } from './actions';\r\n\r\ntype CurrencyType = {\r\n    currencyName: string;\r\n    buyRate: number;\r\n    sellRate: number;\r\n};\r\nexport type CurrencyState = {\r\n    currencies: Array<CurrencyType>;\r\n    currentCurrency: string;\r\n    isBuying: boolean;\r\n    amountOfBYN: string;\r\n    amountOfCurrency: string;\r\n};\r\n\r\nconst initialState: CurrencyState = {\r\n    currencies: [\r\n        {\r\n            currencyName: 'USD',\r\n            buyRate: 2.62,\r\n            sellRate: 2.58,\r\n        },\r\n        {\r\n            currencyName: 'EUR',\r\n            buyRate: 3.1,\r\n            sellRate: 3.06,\r\n        },\r\n        {\r\n            currencyName: 'RUR',\r\n            buyRate: 0.0345,\r\n            sellRate: 0.0341,\r\n        },\r\n    ],\r\n    currentCurrency: 'USD',\r\n    isBuying: true,\r\n    amountOfBYN: '',\r\n    amountOfCurrency: '',\r\n};\r\n\r\nexport const currencyReducer = (state: CurrencyState = initialState, action: CurrencyReducersTypes): CurrencyState => {\r\n    switch (action.type) {\r\n        case ACTIONS_TYPE.CHANGE_CURRENCY_FIELD_TYPE:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            };\r\n        case ACTIONS_TYPE.CHANGE_CHANGE_ACTION:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n                amountOfBYN: '',\r\n                amountOfCurrency: '',\r\n            };\r\n        case ACTIONS_TYPE.CHANGE_CURRENT_CURRENCY:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n                amountOfBYN: '',\r\n                amountOfCurrency: '',\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { combineReducers, createStore } from 'redux';\r\nimport { currencyReducer } from './currencyReducer';\r\n\r\nconst reducers = combineReducers({\r\n    currency: currencyReducer,\r\n});\r\nexport type IGlobalState = ReturnType<typeof reducers>;\r\n\r\nexport const store = createStore(reducers);\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/state';\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}